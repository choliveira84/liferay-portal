@component-name = "portal-wcm"
definition {

	property osgi.module.configuration.file.names = "com.liferay.layout.content.page.editor.web.internal.configuration.ContentsContentPageEditorSidebarPanelConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Users can only edit content pages in edit mode."
	@priority = "5"
	test CannotEditInViewMode {
		property portal.acceptance = "true";

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Assert the content page can be edited in 'Edit Mode' by asserting the fragments side bar is present") {
			AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate back to the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the page cannot be edited by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}
	}

	@description = "This is a test for LPS-78726. Discarding a draft will revert a content page back to its most recent published version."
	@priority = "5"
	test DiscardContentPageDraft {
		property portal.acceptance = "true";

		task ("Assert the Discard Draft button starts off not shown but Publish button starts off enabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Discard the draft") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			PageEditor.clickDiscardDraft(pageName = "Test Content Page Name");
		}

		task ("Assert the Title fragment is no longer present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Publish the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Discard Draft button is not shown but Publish button is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Edit inline content of Heading") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the inline content is back to default") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Paragraph fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the Paragraph fragment has been removed") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}
	}

	@description = "This is a test for LPS-109169. Topper only visible when the element is selected but not hover."
	@priority = "5"
	@uitest
	test HeaderOnlyShownWhenElementSelected {
		property portal.acceptance = "true";

		task ("Add a Heading fragment and an Asset Publisher portlet to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Heading");
		}

		task ("Assert only header of Heading shown when Heading selected") {
			if (IsNotVisible(key_fragmentName = "Heading", locator1 = "Fragment#FRAGMENT_HEADER")) {
				Click.clickNoWaitForVisible(
					key_fragmentName = "Heading",
					locator1 = "Fragment#FRAGMENT_HEADER");
			}

			AssertVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert only header of Asset Publisher shown when Asset Publisher selected") {
			Click.clickNoWaitForVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a test for LPS-106778. Reorganize fragments in page editor."
	@priority = "5"
	@uitest
	test ReorganizeFragmentsInPageEditor {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View Heading frgament is on top of Button fragment") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "2");
		}

		task ("Move the fragment") {
			PageEditor.clickConfigurableField(fragmentName = "Button");

			DragAndDrop.javaScriptDragAndDropToUp(
				id = "element-text",
				key_dragFragmentName = "Button",
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
				locator2 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the Button fragment is on top of Heading frgament") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "2");
		}
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = "5"
	@uitest
	test ViewEditModeHeaderFooterTheme {
		property portal.acceptance = "true";

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Assert the header and footer are disabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "Test Site Name");

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(locator1 = "UserBar#USER_AVATAR_IMAGE");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay");
		}

		task ("Assert the navigation menu widget with the previously created widget page also displays in the disabled part of the header") {
			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the header") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the footer") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}
	}

	@description = "This is a test for LPS-104629. The header of fragment selected can reach the border of the management toolbar."
	@priority = "5"
	@uitest
	test ViewHeaderOfFragmentMoveInsideBodyWhenReachTheManagementToolbar {
		property portal.acceptance = "true";

		task ("Add Image, Slider, Card and HTML fragments to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Slider",
				targetFragmentName = "Card");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Slider");
		}

		task ("Assert Header of Card is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Card moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Image",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is a test for LPS-104629. The header of widget selected can reach the border of the management toolbar."
	@priority = "4"
	@uitest
	test ViewHeaderOfWidgetMoveInsideBodyWhenReachTheManagementToolbar {
		task ("Add My Sites, Documents and Media, Blogs and Asset Publisher widgets to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");

			Refresh();

			PageEditor.addWidget(
				portletName = "Blogs",
				targetFragmentName = "Asset Publisher");

			Refresh();

			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Blogs");

			Refresh();

			PageEditor.addWidget(
				portletName = "My Sites",
				targetFragmentName = "Documents and Media");
		}

		task ("Assert Header of Blogs is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Blogs moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "My Sites",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

}